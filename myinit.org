#+STARTUP: overview
* Interface tweeks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (display-line-numbers-mode 1)
  (global-display-line-numbers-mode t)
#+END_SRC

* Try package
   For trying out other packages without permanently installing it
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC
* Org-bullets
#+BEGIN_SRC emacs-lisp
  ;; org-mode stuff
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
* Ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC
* Swiper
#+BEGIN_SRC
  ;; swiper search
  (use-package counsel
    :ensure t
    )
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)) 
    :config
    (progn 
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-word-1))
#+END_SRC
* AUTO-COMPLETE
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC
* Color theme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

#+RESULTS:

* Python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (setq yas-snippet-dirs
	  '("~/.emacs.d/snippets"
	    "~/.emacs.d/go-snippets"))
    )


#+END_SRC
* Golang go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (autoload 'go-mode "go-mode" nil t))
#+END_SRC

* org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
  :ensure t
   :custom
  (org-roam-directory (file-truename "~/roamNotes"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
	 ("C-c n f" . org-roam-node-find)
	 ("C-c n g" . org-roam-graph)
	 ("C-c n i" . org-roam-node-insert)
	 ("C-c n c" . org-roam-capture)
	 ;; Dailies
	 ("C-c n j" . org-roam-dailies-capture-today)))
  (org-roam-db-autosync-mode)
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
 :ensure t)
#+END_SRC 
